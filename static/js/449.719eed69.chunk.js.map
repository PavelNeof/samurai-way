{"version":3,"file":"static/js/449.719eed69.chunk.js","mappings":"wKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA4I,0BAA5I,EAAsN,4BAAtN,EAA4P,yBAA5P,EAA8R,wBAA9R,EAA+T,wBAA/T,EAAwW,gCAAxW,EAAqZ,4BAArZ,EAA4b,0B,mBCgB5b,EARmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAhB,UACH,SAAC,KAAD,CAASD,UAAWC,EAAWC,GAAIJ,EAAnC,SAA0CD,EAAMM,UCDxD,EAJgB,SAACN,GACb,OAAO,gBAAKG,UAAWC,EAAhB,SAA2BJ,EAAMO,W,sCCHtCC,GAAcC,EAAAA,EAAAA,GAAiB,IAuBxBC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EArBL,SAACX,GAC3B,OACI,iBAAMa,SAAUb,EAAMc,aAAtB,UACI,iBAAKX,UAAWC,EAAhB,WACI,SAACW,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAY,CAACC,EAAAA,EAASX,GACtBF,KAAK,iBACLH,UAAWC,EAGXgB,YAAa,qBAEpB,gBAAKjB,UAAWC,EAAhB,UACI,mBAAQD,UAAW,SAAnB,4BC6BpB,EAjCgB,SAACH,GAEb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMJ,GAAIwB,EAAExB,QACzEyB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAC9CP,EAAMsB,YAAYQ,eASvC,OACI,iBAAK3B,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKmB,KAEL,iBAAKpB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,sBACCuB,MAEL,SAACjB,EAAD,CAAqBG,SAbT,SAACkB,GACjB/B,EAAMgC,YAAYD,EAAME,uB,wCCOhC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KApBkB,SAACd,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACc,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAYpCK,EAAAA,EAFJ,CAEsBC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GkHsM\",\"dialogsItems\":\"Dialogs_dialogsItems__aSrDh\",\"active\":\"Dialogs_active__XUr1F\",\"messages\":\"Dialogs_messages__TQ7vk\",\"message\":\"Dialogs_message__l-07r\",\"divNavLink\":\"Dialogs_divNavLink__XnH5a\",\"navLink\":\"Dialogs_navLink__vxUjB\",\"header\":\"Dialogs_header__P1OXa\",\"dialog\":\"Dialogs_dialog__HL0JW\",\"addMessageForm\":\"Dialogs_addMessageForm__qDNaj\",\"buttonArea\":\"Dialogs_buttonArea__oUD5R\",\"textArea\":\"Dialogs_textArea__AXVoc\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id:number\r\n    name:string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.divNavLink}>\r\n        <NavLink className={s.navLink} to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n\r\n}\r\n\r\nconst Message = (props:MessagePropsType) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import {MaxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport s from '../Dialogs.module.css'\r\n\r\nconst MaxLength50 = MaxLengthCreator(50)\r\n\r\nexport const AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.addMessageForm}>\r\n                <Field component={Textarea}\r\n                       validate = {[required,MaxLength50]}\r\n                       name=\"newMessageBody\"\r\n                       className={s.textArea}\r\n                    // value={newMessageBody}\r\n                    //    onChange={onNEwMessageChange}\r\n                       placeholder={'Enter your text'}>\r\n                </Field>\r\n                <div className={s.buttonArea}>\r\n                    <button className={'button'}>send</button>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFromRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nimport {DialogPageType} from \"../../redux/dialogs-reducer\";\r\n\r\nimport {AddMessageFromRedux} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type DialogsPropsType = {\r\n\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>);\r\n    let newMessageBody = props.dialogsPage.newMassageBody\r\n\r\n\r\n    // if (!props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n    let addNewMessage = (value:any)=>{\r\n        props.sendMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.header}>messages</div>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFromRedux onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\n\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {DialogPageType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\ntype MapStateType = {\r\n    dialogsPage: DialogPageType\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n\r\n    }\r\n}\r\n//let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n//const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n//export default DialogsContainer;\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs)"],"names":["props","path","id","className","s","to","name","message","MaxLength50","MaxLengthCreator","AddMessageFromRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMassageBody","value","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}