{"version":3,"file":"static/js/286.f1dddcac.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-EtNQ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__dnC-E\",\"my\":\"ProfileInfo_my__JNBUx\",\"label\":\"ProfileInfo_label__A99uQ\",\"flexBoxForInput\":\"ProfileInfo_flexBoxForInput__Wvs6l\",\"inputBox\":\"ProfileInfo_inputBox__EllNE\",\"input\":\"ProfileInfo_input__RVZue\",\"contact\":\"ProfileInfo_contact__fvg4t\",\"contactsBox\":\"ProfileInfo_contactsBox__fnMu5\",\"b\":\"ProfileInfo_b__LwTMH\",\"word\":\"ProfileInfo_word__VapyT\",\"error\":\"ProfileInfo_error__9ABVD\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {!editMode &&\r\n                <div className={s.inputBox}>\r\n                    <span className={s.input}  onClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div className={s.inputBox}>\r\n                    <input autoFocus={true} onChange={onStatusChange} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n        </div>\r\n    )\r\n\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport React, {useState} from \"react\";\r\nimport {ProfileDataType} from \"./ProfileDataForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n    const {userId} = useParams()\r\n\r\n   // const userID = useSelector<AppStateType, number | null>(state => state.auth.usersId)\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    // let show\r\n    // if (userId) {\r\n    //     show = +userId === userID\r\n    // }\r\n    // console.log(userId)\r\n    // console.log(userID)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode} className={'button'}>Edit ↓</button>\r\n            </div>}\r\n            <div>\r\n                <b className={s.b}>Full name</b>:<b className={s.word}>{props.profile.fullName}</b>\r\n            </div>\r\n            <div>\r\n                <b className={s.b}>Looking for a job</b>:<span\r\n                className={s.word}>{props.profile.lookingForAJob ? 'yes' : 'no'}</span>\r\n            </div>\r\n            {props.profile.lookingForAJob && <div>\r\n                <b className={s.b}>My professional skills</b>: <span\r\n                className={s.word}>{props.profile.lookingForAJobDescription}</span>\r\n            </div>}\r\n            <div>\r\n                <b onClick={() => setIsOpen(!isOpen)} className={s.contactsBox}>Contacts</b>: {isOpen ?\r\n                <div>{Object.keys(props.profile.contacts).map(key => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })}</div> : ' '}\r\n            </div>\r\n            <div>\r\n                <b className={s.b}>About me</b>:<span className={s.word}>{props.profile.aboutMe}</span>\r\n            </div>\r\n            <div className={s.flexBoxForInput}>\r\n                <b className={s.b}>Status</b>:{!userId ? <ProfileStatusWithHooks status={props.status}\r\n                                                                                      updateStatus={props.updateStatus}/> :\r\n                <span className={s.word}>{props.status}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst Contact = (props: ContactType) => {\r\n    return <div>\r\n        <div className={s.contact}><b className={s.b}>{props.contactTitle}</b> : <span\r\n            className={s.word}>{props.contactValue}</span></div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\nconst ProfileDataForm = (props: InjectedFormProps<ProfileApiType>) => {\r\n\r\n    const profile = useSelector<AppStateType, ProfileApiType>(state => state.profilePage.profile)\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button className={'button'}>Save ↓</button>\r\n            </div>\r\n            {props.error && <div className={s.error}>ERROR:{props.error}</div>}\r\n            <div>\r\n                <b className={s.b}>Full name</b>: <Field placeholder={'FullName'} name={'fullName'} component={Input}/>\r\n            </div>\r\n\r\n            <div>\r\n                <b className={s.b}>Looking for a job</b>:<Field placeholder={''} name={'lookingForAJob'}\r\n                                                                component={Input}\r\n                                                                type={'checkbox'}/>\r\n            </div>\r\n\r\n            <div>\r\n                <b className={s.b}>My professional skills</b>: <Field placeholder={'My Professional skills'}\r\n                                                                      name={'lookingForAJobDescription'}\r\n                                                                      component={Input} type={'textarea'}/>\r\n            </div>\r\n\r\n            <div>\r\n                <b className={s.b}>About me</b>: <Field placeholder={'About me'} name={'aboutMe'}\r\n                                                        component={Input} type={'textarea'}/>\r\n            </div>\r\n\r\n            <div>\r\n                <b className={s.b}>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                // @ts-ignore\r\n                return <div key={key}>\r\n                    <b className={s.b}>{key}: <Field placeholder={key} name={'contacts.' + key}\r\n                                     component={Input}\r\n                    /></b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileApiType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)\r\n\r\n\r\nconst Contact = (props: ContactType) => {\r\n    return <div>\r\n        <div className={s.contact}><b className={s.b}>{props.contactTitle}</b> : {props.contactValue} </div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    userId:number | null\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport type ProfileApiType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: {\r\n        facebook: null | string\r\n        website: null | string\r\n        vk: null | string\r\n        twitter: null | string\r\n        instagram: null | string\r\n        youtube: null | string\r\n        github: null | string\r\n        mainLink: null | string\r\n    }\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {ProfileApiType, ProfileDataFormRedux, ProfileDataType} from \"./ProfileDataForm\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // @ts-ignore\r\n        if (e.target.files.length) {\r\n            // @ts-ignore\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileApiType) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <label className={s.label}> load avatar <input type={'file'} className={s.my}\r\n                                                                                 onChange={onMainPhotoSelected}/></label>}\r\n                {editMode\r\n                    ? <ProfileDataFormRedux initialValues={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} updateStatus={props.updateStatus} status={props.status}\r\n                                   isOwner={props.isOwner} userId={props.userId}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}\r\n                    />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__mT0rj\",\"posts\":\"MyPosts_posts__6l7bT\",\"nameBlock\":\"MyPosts_nameBlock__LruI8\",\"textArea\":\"MyPosts_textArea__V37WH\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CLSZV\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\nexport type PostPropsType ={\r\n    message:string\r\n    likesCount:number\r\n}\r\n\r\nconst Post = (props:PostPropsType) => {\r\n\r\n   const photos = useSelector<AppStateType, string | undefined>(state=>state.profilePage.profile?.photos?.small)\r\n\r\n    return (\r\n        <div className={s.item}>\r\n\r\n            {photos ? <img src={photos} /> : 'Loading photo... ' }\r\n\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostPropsType} from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {MaxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostPropsType>\r\n    addPost: (newPostText:string) => void\r\n\r\n\r\n}\r\n\r\nconst MaxLength10 = MaxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map((p,index) => <Post key={index} message={p.message} likesCount={p.likesCount}/>);\r\nconsole.log('123')\r\n\r\n\r\n    const onAddPost = (value:any) => {\r\n        props.addPost(value.newPostText)\r\n        // props.dispatch(addPostActionCreator(props.newPostText))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.nameBlock}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nconst AddNewPostForm = (props:any) =>{\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={s.textArea} name=\"newPostText\" placeholder={'Enter your text'} component={Textarea} validate={[required, MaxLength10]}></Field>\r\n            </div>\r\n            <div>\r\n                <button className={'button'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType)=>{\r\n    return{\r\n        posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return{\r\n        addPost: (newPostText:string) =>{\r\n            let action = addPostActionCreator(newPostText)\r\n            dispatch(action) ;\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\nimport {Navigate, Params, useParams} from \"react-router-dom\";\r\nimport {ProfileApiType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: (file:string) => void\r\n    saveProfile:(formData: ProfileApiType)=> Promise<number>\r\n    userId:number | null\r\n\r\n}\r\n\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n   // if(!props.isAuth) return <Navigate to={'/login'}/>\r\n    return (\r\n        <div>\r\n            <ProfileInfo userId={props.userId} saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner}\r\n                         profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"../Common/withRouter/withRouter\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {ProfileApiType, ProfileDataType} from \"./ProfileInfo/ProfileDataForm\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.router.navigate('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.router.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    profile={this.props.profile}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                    userId={123}\r\n\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type ProfileMapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    getStatus: (userId: number | null) => void\r\n    savePhoto: (file: string) => void\r\n    saveProfile: (formData: ProfileApiType) => Promise<number>\r\n}\r\n\r\nexport type ProfileContainerPropsType = ProfileMapStateToProps & MapDispatchPropsType & {\r\n    router: {\r\n        params: {\r\n            userId: number | null\r\n        },\r\n        navigate: (path: string) => void\r\n    }\r\n}\r\n\r\nexport type ProfileMapStateToPropsForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport type ProfileType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string\r\n    followed: boolean\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: null | string\r\n        website: null | string\r\n        vk: null | string\r\n        twitter: null | string\r\n        instagram: null | string\r\n        youtube: null | string\r\n        github: null | string\r\n        mainLink: null | string\r\n    }\r\n}\r\n\r\n\r\n//вопрос с типизацией ProfileMapStateToProps\r\nlet mapStateToProps = (state: AppStateType): ProfileMapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.usersId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n//let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n//let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n// @ts-ignore\r\n//export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, updateStatus, getStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileData","userId","useParams","isOpen","setIsOpen","isOwner","goToEditMode","profile","fullName","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","aboutMe","ProfileDataFormRedux","reduxForm","form","useSelector","state","profilePage","onSubmit","handleSubmit","error","Field","placeholder","name","component","Input","type","Preloader","src","photos","large","userPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","small","message","likesCount","MaxLength10","MaxLengthCreator","MyPosts","React","postsElements","posts","p","index","console","log","AddNewPostFormRedux","addPost","newPostText","Textarea","validate","required","connect","dispatch","action","addPostActionCreator","ProfileContainer","this","router","params","autorizedUserId","navigate","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","usersId","isAuth","withRouter"],"sourceRoot":""}